# No operators to choose from, perform no-op
sp { proposewait (state <s> ^name droneFlight ^wait-flag <w>)
-->
 (<s> ^operator <o> + <)(<o> ^name Processing) }

sp { applywait (state <s> ^name droneFlight ^operator <o> ^wait-flag <w>) (<o> ^name Processing)
-->
 (<s> ^wait-flag (- <w>))(<s> ^wait-flag <w> -) }

sp {drone*propose*initialize
    (state <s> ^superstate nil -^name <n*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name initialize-drone)
}

sp {drone*apply*initialize
    (state <s> ^operator <o*1>)
    (<o*1> ^name initialize-drone)
    -->
    (<s> ^name droneFlight ^wait-flag 1)
}

sp {drone*propose*operator*C1-Baseline
    "No contingency behavior - continue normally"
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> -^unaddressedProblem -^addressedProblem
               ^takeOver true -^oilDrop large)
    -->
    (<s> ^operator <o> +)
    (<o> ^name continue)
}

sp {drone*apply*operator*C1
    "Everything normal"
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> -^unaddressedProblem
              -^addressedProblem ^operator <o>)
    (<o> ^name continue)
    -->
    //continue flight - if you have to do anything special to maintain flight then do it here
}

sp {drone*apply*mark-oil-drop-large
    "For oil, mark oil drop if it is large"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data>)
    (<drone-data> ^oilPressureGreenLo <limit> ^{<< oilPressure1 oilPressure2 oilPressure3 oilPressure4 oilPressure5 oilPressure6 oilPressure7 oilPressure8 >> <opName>} {<op_num> < <limit>})
    -->
    (<s> ^oilDrop large)
}

sp {drone*propose*operator*C5-Fault
    "Emergency landing after sudden and sever drop in oil pressure"
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> -^addressedProblem
               ^oilDrop large ^populated heavy)
    -->
    (<s> ^operator <o> + > ^unaddressedProblem C5)
    (<o> ^name C5)
}

sp {drone*apply*operator*address-C5-Fault
    "Executes emergency landing"
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> ^unaddressedProblem C5
              ^operator <o>)
    (<o> ^name C5)
    -->
    (<s> ^unaddressedProblem C5 - ^addressedProblem C5)
    //Execute emergency landing by interacting with XPlane
}

sp {drone*propose*operator*C2-Lost-Link
    "Return to base via same routing after 1 minute following loss of link to avoid flight over populous areas"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> -^addressedProblem ^takeOver false
               ^populated {<< light-to-heavy unknown >> <p>})
    (<drone-data> ^currentTime <current-time>)
    -->
    (<s> ^addressedProblem C2 ^timer <t>)
    (<t> ^targetTime (+ 60 <current-time>))
}

sp {drone*propose*operator*C3-Lost-Link
    "Return to base via same routing after 8 minutes following loss of link because lightly populated and might restore link"
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> -^addressedProblem ^takeOver false
               ^populated light)
    (<drone-data> ^currentTime <current-time>)
    -->
    (<s> ^addressedProblem C3 ^timer <t>)
    (<t> ^targetTime (+ 480 <current-time>))
}

sp {drone*apply*operator*address-C2-and-C3
    "Executes a return to base by doing a 180 degree turn and following waypoints back"
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> ^addressedProblem {<< C2 C3 >> <problem>} ^timer <t>)
    (<t> ^done true)
    -->
    (<t> ^removeTimer true)
    // Return to base via same routing
}

sp {drone*propose*operator*C4-Lost-Link
    "Maintain Pre-Programmed Course, Return to mission altitude/altitude floor (<= 500 ft) 1 minute after loss of link"
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> -^addressedProblem ^takeOver false
               ^populated none)
    (<drone-data> ^currentTime <current-time>)
    -->
    (<s> ^addressedProblem C4 ^timer <t>)
    (<t> ^targetTime (+ 60 <current-time>))
}

sp {drone*apply*operator*address-C4
    "Maintains course and returns to altitude floor"
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> ^addressedProblem C4 ^timer <t>)
    (<t> ^done true)
    -->
    // Return to altitude floor
}

sp {drone*apply*operator*address-timer-problem
    "Address C2, C3, or C4"
    (state <s> ^name droneFlight ^io.input-link.flightdata <drone-data> ^unaddressedProblem {<< C2 C3 C4 >> <problem>}
               ^operator <o> -^timer)
    (<o> ^name <problem> ^targetTime <t>)
    -->
    (<s> ^timer <t> ^addressedProblem <problem> ^unaddressedProblem <problem> -)
    (<t> ^targetTime <t>)
}

sp {drone*apply*timer-done-execute
    "Marks timers as done if the current time meets or exceeds their target time"
    :o-support
    (state <s> ^name droneFlight ^timer <t> ^io.input-link.flightdata <drone-data> ^addressedProblem <problem>)
    (<t> ^targetTime <target-time> -^done)
    (<drone-data> ^currentTime {<time> >= <target-time>})
    -->
    (<t> ^done true)
}

sp {drone*apply*timer-remove-execute
    "Removes Timer"
    :o-support
    (state <s> ^name droneFlight ^timer <t> ^io.input-link.flightdata <drone-data> ^addressedProblem <problem>)
    (<t> ^removeTimer true)
    -->
    (<s> ^timer <t> -)
}

sp {drone*apply*takeOver
    "Issues first command when takeover is active"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd>)
    (<fd> ^takeOver true)
    -->
    (<s> ^sentCommand aiOn)
}

sp {drone*apply*updateOut*setAIOn
    "Creates command on output for sending to XPlane to turn on the AI"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand aiOn)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref sim/cockpit/autopilot/autopilot_mode
           ^setValue 2
           ^name setAIOn)
    (<s> ^sentCommand aiOn -
         ^sentCommand reverse)
    (write (crlf) |Adding AI_ON!|)
}


sp {drone*removeOutputCommand
    "Removes output command"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd>)
    (<fd> ^removeCommand <rc>)
    (<out> ^command <rc>)
    -->
    (<out> ^command <rc> -)
}

sp {drone*apply*updateOut*queryForTimer
    "Creates command on output to check if the plane will be over a populated area in the next minute"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand queryPop)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref null
           ^setValue calculateWillBeInPopulatedArea
           ^name timerChecker)
    (<s> ^sentCommand queryPop -)
    (write (crlf) | Adding Check Timer Command!|)
}

sp {drone*apply*updateOut*reverseWaypoints
    "Creates command on output for sending to XPlane to overwrite the way points to return to home"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand reverse)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref null
           ^setValue reverse
           ^name reverseWaypoints)
    (<s> ^sentCommand reverse -)
    (write (crlf) |Adding Reverse Command!|)
}